{"dependencies":[{"name":"lodash/inRange","loc":{"line":1,"column":21}},{"name":"lodash/first","loc":{"line":2,"column":19}},{"name":"lodash/isNil","loc":{"line":3,"column":19}},{"name":"lodash/some","loc":{"line":4,"column":18}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _inRange2 = require(\"lodash/inRange\");\n\nvar _inRange3 = _interopRequireDefault(_inRange2);\n\nvar _first3 = require(\"lodash/first\");\n\nvar _first4 = _interopRequireDefault(_first3);\n\nvar _isNil2 = require(\"lodash/isNil\");\n\nvar _isNil3 = _interopRequireDefault(_isNil2);\n\nvar _some2 = require(\"lodash/some\");\n\nvar _some3 = _interopRequireDefault(_some2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Determines if a click's coordinates are within the bounds of a node.\n *\n * @see https://github.com/Semantic-Org/Semantic-UI-React/pull/2384\n *\n * @param {object} node - A DOM node.\n * @param {object} e - A SyntheticEvent or DOM Event.\n * @returns {boolean}\n */\nvar doesNodeContainClick = function doesNodeContainClick(node, e) {\n  if ((0, _some3.default)([e, node], _isNil3.default)) return false;\n\n  // first check if the node contains the e.target, simplest use case\n  if (node.contains(e.target)) return true;\n\n  // return early if the event properties aren't available\n  // prevent measuring the node and repainting if we don't need to\n  var clientX = e.clientX,\n      clientY = e.clientY;\n\n  if ((0, _some3.default)([clientX, clientY], _isNil3.default)) return false;\n\n  // false if the node is not visible\n  var clientRects = node.getClientRects();\n  // Heads Up!\n  // getClientRects returns a DOMRectList, not an array nor a plain object\n  // We explicitly avoid _.isEmpty and check .length to cover all possible shapes\n  if (!node.offsetWidth || !node.offsetHeight || !clientRects || !clientRects.length) return false;\n\n  // false if the node doesn't have a valid bounding rect\n\n  var _first2 = (0, _first4.default)(clientRects),\n      top = _first2.top,\n      bottom = _first2.bottom,\n      left = _first2.left,\n      right = _first2.right;\n\n  if ((0, _some3.default)([top, bottom, left, right], _isNil3.default)) return false;\n\n  // we add a small decimal to the upper bound just to make it inclusive\n  // don't add an whole pixel (1) as the event/node values may be decimal sensitive\n  return (0, _inRange3.default)(clientY, top, bottom + 0.001) && (0, _inRange3.default)(clientX, left, right + 0.001);\n};\n\nexports.default = doesNodeContainClick;"},"hash":"6b82fb5353f774ab1cece63f2aae39db"}